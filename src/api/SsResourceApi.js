/**
 * s4s-full
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/S4sError', 'model/ResourcePatch', 'model/ResourcePatchResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/S4sError'), require('../model/ResourcePatch'), require('../model/ResourcePatchResult'));
  } else {
    // Browser globals (root is window)
    if (!root.S4sFull) {
      root.S4sFull = {};
    }
    root.S4sFull.SsResourceApi = factory(root.S4sFull.ApiClient, root.S4sFull.S4sError, root.S4sFull.ResourcePatch, root.S4sFull.ResourcePatchResult);
  }
}(this, function(ApiClient, S4sError, ResourcePatch, ResourcePatchResult) {
  'use strict';

  /**
   * SsResource service.
   * @module api/SsResourceApi
   * @version stable
   */

  /**
   * Constructs a new SsResourceApi. 
   * @alias module:api/SsResourceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the customerResourceGet operation.
     * @callback module:api/SsResourceApi~customerResourceGetCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} resourceid 
     * @param {module:api/SsResourceApi~customerResourceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Integer'}
     */
    this.customerResourceGet = function(customerId, resourceid, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerResourceGet";
      }

      // verify the required parameter 'resourceid' is set
      if (resourceid == undefined || resourceid == null) {
        throw "Missing the required parameter 'resourceid' when calling customerResourceGet";
      }


      var pathParams = {
        'customer-id': customerId,
        'resourceid': resourceid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/s4s-resource/customer/{customer-id}/resource/{resourceid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerResourceLimitGet operation.
     * @callback module:api/SsResourceApi~customerResourceLimitGetCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} resourceid 
     * @param {module:api/SsResourceApi~customerResourceLimitGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Integer'}
     */
    this.customerResourceLimitGet = function(customerId, resourceid, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerResourceLimitGet";
      }

      // verify the required parameter 'resourceid' is set
      if (resourceid == undefined || resourceid == null) {
        throw "Missing the required parameter 'resourceid' when calling customerResourceLimitGet";
      }


      var pathParams = {
        'customer-id': customerId,
        'resourceid': resourceid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/s4s-resource/customer/{customer-id}/resource/{resourceid}/limit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerResourcePatch operation.
     * @callback module:api/SsResourceApi~customerResourcePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourcePatchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Updates a resource of a customer
     * @param {String} customerId 
     * @param {String} resourceid 
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourcePatch} opts.value The Operation and value to update the resource
     * @param {module:api/SsResourceApi~customerResourcePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourcePatchResult}
     */
    this.customerResourcePatch = function(customerId, resourceid, opts, callback) {
      opts = opts || {};
      var postBody = opts['value'];

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerResourcePatch";
      }

      // verify the required parameter 'resourceid' is set
      if (resourceid == undefined || resourceid == null) {
        throw "Missing the required parameter 'resourceid' when calling customerResourcePatch";
      }


      var pathParams = {
        'customer-id': customerId,
        'resourceid': resourceid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResourcePatchResult;

      return this.apiClient.callApi(
        '/s4s-resource/customer/{customer-id}/resource/{resourceid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerResourceProductGet operation.
     * @callback module:api/SsResourceApi~customerResourceProductGetCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} resourceid 
     * @param {String} customerProductId 
     * @param {module:api/SsResourceApi~customerResourceProductGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Integer'}
     */
    this.customerResourceProductGet = function(customerId, resourceid, customerProductId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerResourceProductGet";
      }

      // verify the required parameter 'resourceid' is set
      if (resourceid == undefined || resourceid == null) {
        throw "Missing the required parameter 'resourceid' when calling customerResourceProductGet";
      }

      // verify the required parameter 'customerProductId' is set
      if (customerProductId == undefined || customerProductId == null) {
        throw "Missing the required parameter 'customerProductId' when calling customerResourceProductGet";
      }


      var pathParams = {
        'customer-id': customerId,
        'resourceid': resourceid,
        'customer-product-id': customerProductId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/s4s-resource/customer/{customer-id}/resource/{resourceid}/product/{customer-product-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerResourceProductLimitGet operation.
     * @callback module:api/SsResourceApi~customerResourceProductLimitGetCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} resourceid 
     * @param {String} customerProductId 
     * @param {module:api/SsResourceApi~customerResourceProductLimitGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Integer'}
     */
    this.customerResourceProductLimitGet = function(customerId, resourceid, customerProductId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerResourceProductLimitGet";
      }

      // verify the required parameter 'resourceid' is set
      if (resourceid == undefined || resourceid == null) {
        throw "Missing the required parameter 'resourceid' when calling customerResourceProductLimitGet";
      }

      // verify the required parameter 'customerProductId' is set
      if (customerProductId == undefined || customerProductId == null) {
        throw "Missing the required parameter 'customerProductId' when calling customerResourceProductLimitGet";
      }


      var pathParams = {
        'customer-id': customerId,
        'resourceid': resourceid,
        'customer-product-id': customerProductId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/s4s-resource/customer/{customer-id}/resource/{resourceid}/product/{customer-product-id}/limit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
