/**
 * s4s-full
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/S4sError', 'model/CustomerPack', 'model/CustomerPackSubscription', 'model/ProductConf'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/S4sError'), require('../model/CustomerPack'), require('../model/CustomerPackSubscription'), require('../model/ProductConf'));
  } else {
    // Browser globals (root is window)
    if (!root.S4sFull) {
      root.S4sFull = {};
    }
    root.S4sFull.SsProductApi = factory(root.S4sFull.ApiClient, root.S4sFull.S4sError, root.S4sFull.CustomerPack, root.S4sFull.CustomerPackSubscription, root.S4sFull.ProductConf);
  }
}(this, function(ApiClient, S4sError, CustomerPack, CustomerPackSubscription, ProductConf) {
  'use strict';

  /**
   * SsProduct service.
   * @module api/SsProductApi
   * @version stable
   */

  /**
   * Constructs a new SsProductApi. 
   * @alias module:api/SsProductApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the customerEnjoyAdd operation.
     * @callback module:api/SsProductApi~customerEnjoyAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Relationate a new product with the customer
     * @param {String} customerId The given id from the user service
     * @param {Integer} expirationOffset 
     * @param {String} overrideEnjoyId 
     * @param {String} overrideSubscriptionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerPack} opts.newEnjoy 
     * @param {module:api/SsProductApi~customerEnjoyAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPack}
     */
    this.customerEnjoyAdd = function(customerId, expirationOffset, overrideEnjoyId, overrideSubscriptionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['newEnjoy'];

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerEnjoyAdd";
      }

      // verify the required parameter 'expirationOffset' is set
      if (expirationOffset == undefined || expirationOffset == null) {
        throw "Missing the required parameter 'expirationOffset' when calling customerEnjoyAdd";
      }

      // verify the required parameter 'overrideEnjoyId' is set
      if (overrideEnjoyId == undefined || overrideEnjoyId == null) {
        throw "Missing the required parameter 'overrideEnjoyId' when calling customerEnjoyAdd";
      }

      // verify the required parameter 'overrideSubscriptionId' is set
      if (overrideSubscriptionId == undefined || overrideSubscriptionId == null) {
        throw "Missing the required parameter 'overrideSubscriptionId' when calling customerEnjoyAdd";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'expiration-offset': expirationOffset,
        'override-enjoy-id': overrideEnjoyId,
        'override-subscription-id': overrideSubscriptionId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPack;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/enjoy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerEnjoyClose operation.
     * @callback module:api/SsProductApi~customerEnjoyCloseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
     * @param {String} customerId The given id from the user service
     * @param {String} enjoyId 
     * @param {module:api/SsProductApi~customerEnjoyCloseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPack}
     */
    this.customerEnjoyClose = function(customerId, enjoyId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerEnjoyClose";
      }

      // verify the required parameter 'enjoyId' is set
      if (enjoyId == undefined || enjoyId == null) {
        throw "Missing the required parameter 'enjoyId' when calling customerEnjoyClose";
      }


      var pathParams = {
        'customer-id': customerId,
        'enjoy-id': enjoyId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPack;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}/close', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerEnjoyGet operation.
     * @callback module:api/SsProductApi~customerEnjoyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Get a certain product releated to customer
     * @param {String} customerId The given id from the user service
     * @param {String} enjoyId 
     * @param {module:api/SsProductApi~customerEnjoyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPack}
     */
    this.customerEnjoyGet = function(customerId, enjoyId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerEnjoyGet";
      }

      // verify the required parameter 'enjoyId' is set
      if (enjoyId == undefined || enjoyId == null) {
        throw "Missing the required parameter 'enjoyId' when calling customerEnjoyGet";
      }


      var pathParams = {
        'customer-id': customerId,
        'enjoy-id': enjoyId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPack;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerEnjoyGetAll operation.
     * @callback module:api/SsProductApi~customerEnjoyGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Get all the current products relationed with the customer
     * @param {String} customerId The given id from the user service
     * @param {module:api/SsProductApi~customerEnjoyGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.customerEnjoyGetAll = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerEnjoyGetAll";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/enjoy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerEnjoySpend operation.
     * @callback module:api/SsProductApi~customerEnjoySpendCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': 'Integer'}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {String} customerPackId 
     * @param {module:api/SsProductApi~customerEnjoySpendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': 'Integer'}>}
     */
    this.customerEnjoySpend = function(customerId, customerPackId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerEnjoySpend";
      }

      // verify the required parameter 'customerPackId' is set
      if (customerPackId == undefined || customerPackId == null) {
        throw "Missing the required parameter 'customerPackId' when calling customerEnjoySpend";
      }


      var pathParams = {
        'customer-id': customerId,
        'customer-pack-id': customerPackId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'Integer'};

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/enjoy/{customer-pack-id}/spend', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerEnjoyValues operation.
     * @callback module:api/SsProductApi~customerEnjoyValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {Boolean} loadResourceStatusList 
     * @param {module:api/SsProductApi~customerEnjoyValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerEnjoyValues = function(customerId, page, numberPerPage, loadResourceStatusList, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerEnjoyValues";
      }

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling customerEnjoyValues";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling customerEnjoyValues";
      }

      // verify the required parameter 'loadResourceStatusList' is set
      if (loadResourceStatusList == undefined || loadResourceStatusList == null) {
        throw "Missing the required parameter 'loadResourceStatusList' when calling customerEnjoyValues";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage,
        'load-resource-status-list': loadResourceStatusList
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/enjoy/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerHistoryPackGet operation.
     * @callback module:api/SsProductApi~customerHistoryPackGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {String} id 
     * @param {module:api/SsProductApi~customerHistoryPackGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPack}
     */
    this.customerHistoryPackGet = function(customerId, id, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerHistoryPackGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling customerHistoryPackGet";
      }


      var pathParams = {
        'customer-id': customerId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPack;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/history/pack/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerHistoryPackGetAll operation.
     * @callback module:api/SsProductApi~customerHistoryPackGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {module:api/SsProductApi~customerHistoryPackGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.customerHistoryPackGetAll = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerHistoryPackGetAll";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/history/pack', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerHistoryPackValues operation.
     * @callback module:api/SsProductApi~customerHistoryPackValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {Boolean} loadResourceStatusList 
     * @param {module:api/SsProductApi~customerHistoryPackValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerHistoryPackValues = function(customerId, page, numberPerPage, loadResourceStatusList, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerHistoryPackValues";
      }

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling customerHistoryPackValues";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling customerHistoryPackValues";
      }

      // verify the required parameter 'loadResourceStatusList' is set
      if (loadResourceStatusList == undefined || loadResourceStatusList == null) {
        throw "Missing the required parameter 'loadResourceStatusList' when calling customerHistoryPackValues";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage,
        'load-resource-status-list': loadResourceStatusList
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/history/pack/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerHistorySubscriptionGet operation.
     * @callback module:api/SsProductApi~customerHistorySubscriptionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {String} id 
     * @param {module:api/SsProductApi~customerHistorySubscriptionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPack}
     */
    this.customerHistorySubscriptionGet = function(customerId, id, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerHistorySubscriptionGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling customerHistorySubscriptionGet";
      }


      var pathParams = {
        'customer-id': customerId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPack;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/history/subscription/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerHistorySubscriptionGetAll operation.
     * @callback module:api/SsProductApi~customerHistorySubscriptionGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {module:api/SsProductApi~customerHistorySubscriptionGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.customerHistorySubscriptionGetAll = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerHistorySubscriptionGetAll";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/history/subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerHistorySubscriptionValues operation.
     * @callback module:api/SsProductApi~customerHistorySubscriptionValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {Boolean} loadResourceStatusList 
     * @param {module:api/SsProductApi~customerHistorySubscriptionValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerHistorySubscriptionValues = function(customerId, page, numberPerPage, loadResourceStatusList, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerHistorySubscriptionValues";
      }

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling customerHistorySubscriptionValues";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling customerHistorySubscriptionValues";
      }

      // verify the required parameter 'loadResourceStatusList' is set
      if (loadResourceStatusList == undefined || loadResourceStatusList == null) {
        throw "Missing the required parameter 'loadResourceStatusList' when calling customerHistorySubscriptionValues";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage,
        'load-resource-status-list': loadResourceStatusList
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/history/subscription/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerResource operation.
     * @callback module:api/SsProductApi~customerResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {module:api/SsProductApi~customerResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerResource = function(customerId, page, numberPerPage, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerResource";
      }

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling customerResource";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling customerResource";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/resource', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerSubscriptionAdd operation.
     * @callback module:api/SsProductApi~customerSubscriptionAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPackSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Add a new subscription to customer
     * @param {String} customerId The given id from the user service
     * @param {String} overrideSubscriptionId 
     * @param {String} overrideEnjoyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerPackSubscription} opts.newSubscription 
     * @param {module:api/SsProductApi~customerSubscriptionAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPackSubscription}
     */
    this.customerSubscriptionAdd = function(customerId, overrideSubscriptionId, overrideEnjoyId, opts, callback) {
      opts = opts || {};
      var postBody = opts['newSubscription'];

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerSubscriptionAdd";
      }

      // verify the required parameter 'overrideSubscriptionId' is set
      if (overrideSubscriptionId == undefined || overrideSubscriptionId == null) {
        throw "Missing the required parameter 'overrideSubscriptionId' when calling customerSubscriptionAdd";
      }

      // verify the required parameter 'overrideEnjoyId' is set
      if (overrideEnjoyId == undefined || overrideEnjoyId == null) {
        throw "Missing the required parameter 'overrideEnjoyId' when calling customerSubscriptionAdd";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'override-subscription-id': overrideSubscriptionId,
        'override-enjoy-id': overrideEnjoyId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPackSubscription;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerSubscriptionClose operation.
     * @callback module:api/SsProductApi~customerSubscriptionCloseCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {String} subscriptionId 
     * @param {module:api/SsProductApi~customerSubscriptionCloseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.customerSubscriptionClose = function(customerId, subscriptionId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerSubscriptionClose";
      }

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId == undefined || subscriptionId == null) {
        throw "Missing the required parameter 'subscriptionId' when calling customerSubscriptionClose";
      }


      var pathParams = {
        'customer-id': customerId,
        'subscription-id': subscriptionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/subscription/{subscription-id}/close', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerSubscriptionGet operation.
     * @callback module:api/SsProductApi~customerSubscriptionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPackSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Get a subscription by its Ids
     * @param {String} customerId The given id from the user service
     * @param {String} subscriptionId 
     * @param {module:api/SsProductApi~customerSubscriptionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPackSubscription}
     */
    this.customerSubscriptionGet = function(customerId, subscriptionId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerSubscriptionGet";
      }

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId == undefined || subscriptionId == null) {
        throw "Missing the required parameter 'subscriptionId' when calling customerSubscriptionGet";
      }


      var pathParams = {
        'customer-id': customerId,
        'subscription-id': subscriptionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPackSubscription;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/subscription/{subscription-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerSubscriptionGetAll operation.
     * @callback module:api/SsProductApi~customerSubscriptionGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Get all the current subscriptions of a customer
     * @param {String} customerId The given id from the user service
     * @param {module:api/SsProductApi~customerSubscriptionGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.customerSubscriptionGetAll = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerSubscriptionGetAll";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerSubscriptionRenew operation.
     * @callback module:api/SsProductApi~customerSubscriptionRenewCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {String} subscriptionId 
     * @param {module:api/SsProductApi~customerSubscriptionRenewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.customerSubscriptionRenew = function(customerId, subscriptionId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerSubscriptionRenew";
      }

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId == undefined || subscriptionId == null) {
        throw "Missing the required parameter 'subscriptionId' when calling customerSubscriptionRenew";
      }


      var pathParams = {
        'customer-id': customerId,
        'subscription-id': subscriptionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/subscription/{subscription-id}/renew', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerSubscriptionSpend operation.
     * @callback module:api/SsProductApi~customerSubscriptionSpendCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': 'Integer'}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {String} customerSubscriptionId 
     * @param {module:api/SsProductApi~customerSubscriptionSpendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': 'Integer'}>}
     */
    this.customerSubscriptionSpend = function(customerId, customerSubscriptionId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerSubscriptionSpend";
      }

      // verify the required parameter 'customerSubscriptionId' is set
      if (customerSubscriptionId == undefined || customerSubscriptionId == null) {
        throw "Missing the required parameter 'customerSubscriptionId' when calling customerSubscriptionSpend";
      }


      var pathParams = {
        'customer-id': customerId,
        'customer-subscription-id': customerSubscriptionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'Integer'};

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/subscription/{customer-subscription-id}/spend', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerSubscriptionValues operation.
     * @callback module:api/SsProductApi~customerSubscriptionValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId The given id from the user service
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {Boolean} loadDefaultUser 
     * @param {module:api/SsProductApi~customerSubscriptionValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerSubscriptionValues = function(customerId, page, numberPerPage, loadDefaultUser, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerSubscriptionValues";
      }

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling customerSubscriptionValues";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling customerSubscriptionValues";
      }

      // verify the required parameter 'loadDefaultUser' is set
      if (loadDefaultUser == undefined || loadDefaultUser == null) {
        throw "Missing the required parameter 'loadDefaultUser' when calling customerSubscriptionValues";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage,
        'load-default-user': loadDefaultUser
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/s4s-product/customer/{customer-id}/subscription/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfigGet operation.
     * @callback module:api/SsProductApi~productConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductConf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsProductApi~productConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductConf}
     */
    this.productConfigGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductConf;

      return this.apiClient.callApi(
        '/s4s-product/productConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productConfigPut operation.
     * @callback module:api/SsProductApi~productConfigPutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductConf} opts.a 
     * @param {module:api/SsProductApi~productConfigPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.productConfigPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['a'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-product/productConfig', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
