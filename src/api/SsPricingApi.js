/**
 * s4s-full
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/S4sError', 'model/CustomerBill', 'model/CustomerPlan', 'model/Plan', 'model/PricingTableFull', 'model/PricingTable2Full', 'model/PricingConf', 'model/PricingUiConf'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/S4sError'), require('../model/CustomerBill'), require('../model/CustomerPlan'), require('../model/Plan'), require('../model/PricingTableFull'), require('../model/PricingTable2Full'), require('../model/PricingConf'), require('../model/PricingUiConf'));
  } else {
    // Browser globals (root is window)
    if (!root.S4sFull) {
      root.S4sFull = {};
    }
    root.S4sFull.SsPricingApi = factory(root.S4sFull.ApiClient, root.S4sFull.S4sError, root.S4sFull.CustomerBill, root.S4sFull.CustomerPlan, root.S4sFull.Plan, root.S4sFull.PricingTableFull, root.S4sFull.PricingTable2Full, root.S4sFull.PricingConf, root.S4sFull.PricingUiConf);
  }
}(this, function(ApiClient, S4sError, CustomerBill, CustomerPlan, Plan, PricingTableFull, PricingTable2Full, PricingConf, PricingUiConf) {
  'use strict';

  /**
   * SsPricing service.
   * @module api/SsPricingApi
   * @version stable
   */

  /**
   * Constructs a new SsPricingApi. 
   * @alias module:api/SsPricingApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the customerBillClose operation.
     * @callback module:api/SsPricingApi~customerBillCloseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerBill} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} customerBillId 
     * @param {module:api/SsPricingApi~customerBillCloseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerBill}
     */
    this.customerBillClose = function(customerId, customerBillId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerBillClose";
      }

      // verify the required parameter 'customerBillId' is set
      if (customerBillId == undefined || customerBillId == null) {
        throw "Missing the required parameter 'customerBillId' when calling customerBillClose";
      }


      var pathParams = {
        'customer-id': customerId,
        'customer-bill-id': customerBillId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerBill;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/bill/{customer-bill-id}/close', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerBillGet operation.
     * @callback module:api/SsPricingApi~customerBillGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerBill} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} customerBillId 
     * @param {module:api/SsPricingApi~customerBillGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerBill}
     */
    this.customerBillGet = function(customerId, customerBillId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerBillGet";
      }

      // verify the required parameter 'customerBillId' is set
      if (customerBillId == undefined || customerBillId == null) {
        throw "Missing the required parameter 'customerBillId' when calling customerBillGet";
      }


      var pathParams = {
        'customer-id': customerId,
        'customer-bill-id': customerBillId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerBill;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/bill/{customer-bill-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerBillInitGet operation.
     * @callback module:api/SsPricingApi~customerBillInitGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerBill} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} billId 
     * @param {String} customerPlanId 
     * @param {module:api/SsPricingApi~customerBillInitGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerBill}
     */
    this.customerBillInitGet = function(customerId, billId, customerPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerBillInitGet";
      }

      // verify the required parameter 'billId' is set
      if (billId == undefined || billId == null) {
        throw "Missing the required parameter 'billId' when calling customerBillInitGet";
      }

      // verify the required parameter 'customerPlanId' is set
      if (customerPlanId == undefined || customerPlanId == null) {
        throw "Missing the required parameter 'customerPlanId' when calling customerBillInitGet";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'bill-id': billId,
        'customer-plan-id': customerPlanId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerBill;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/bill/init', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerBillInitPost operation.
     * @callback module:api/SsPricingApi~customerBillInitPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerBill} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} billId 
     * @param {String} customerPlanId 
     * @param {module:api/SsPricingApi~customerBillInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerBill}
     */
    this.customerBillInitPost = function(customerId, billId, customerPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerBillInitPost";
      }

      // verify the required parameter 'billId' is set
      if (billId == undefined || billId == null) {
        throw "Missing the required parameter 'billId' when calling customerBillInitPost";
      }

      // verify the required parameter 'customerPlanId' is set
      if (customerPlanId == undefined || customerPlanId == null) {
        throw "Missing the required parameter 'customerPlanId' when calling customerBillInitPost";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'bill-id': billId,
        'customer-plan-id': customerPlanId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerBill;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/bill/initPost', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerBillOrGet operation.
     * @callback module:api/SsPricingApi~customerBillOrGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerBill} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {module:api/SsPricingApi~customerBillOrGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerBill}
     */
    this.customerBillOrGet = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerBillOrGet";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerBill;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/bill/or', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerBillValues operation.
     * @callback module:api/SsPricingApi~customerBillValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {module:api/SsPricingApi~customerBillValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerBillValues = function(customerId, page, numberPerPage, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerBillValues";
      }

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling customerBillValues";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling customerBillValues";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/bill/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerHistoryPlanValues operation.
     * @callback module:api/SsPricingApi~customerHistoryPlanValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {module:api/SsPricingApi~customerHistoryPlanValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerHistoryPlanValues = function(customerId, page, numberPerPage, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerHistoryPlanValues";
      }

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling customerHistoryPlanValues";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling customerHistoryPlanValues";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/history/plan/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerPlanAdd operation.
     * @callback module:api/SsPricingApi~customerPlanAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Add a new Product to a Customer
     * @param {String} customerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerPlan} opts.customerPlan 
     * @param {module:api/SsPricingApi~customerPlanAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPlan}
     */
    this.customerPlanAdd = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = opts['customerPlan'];

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerPlanAdd";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPlan;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/plan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerPlanAddCheck operation.
     * @callback module:api/SsPricingApi~customerPlanAddCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerPlan} opts.customerPlan 
     * @param {module:api/SsPricingApi~customerPlanAddCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPlan}
     */
    this.customerPlanAddCheck = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = opts['customerPlan'];

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerPlanAddCheck";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPlan;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/plan/addCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerPlanClose operation.
     * @callback module:api/SsPricingApi~customerPlanCloseCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} customerPlanId 
     * @param {module:api/SsPricingApi~customerPlanCloseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.customerPlanClose = function(customerId, customerPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerPlanClose";
      }

      // verify the required parameter 'customerPlanId' is set
      if (customerPlanId == undefined || customerPlanId == null) {
        throw "Missing the required parameter 'customerPlanId' when calling customerPlanClose";
      }


      var pathParams = {
        'customer-id': customerId,
        'customer-plan-id': customerPlanId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/plan/{customer-plan-id}/close', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerPlanFamily operation.
     * @callback module:api/SsPricingApi~customerPlanFamilyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} family 
     * @param {module:api/SsPricingApi~customerPlanFamilyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPlan}
     */
    this.customerPlanFamily = function(customerId, family, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerPlanFamily";
      }

      // verify the required parameter 'family' is set
      if (family == undefined || family == null) {
        throw "Missing the required parameter 'family' when calling customerPlanFamily";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'family': family
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPlan;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/plan/family', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerPlanGet operation.
     * @callback module:api/SsPricingApi~customerPlanGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Get a certain 
     * @param {String} customerId 
     * @param {String} customerPlanId 
     * @param {module:api/SsPricingApi~customerPlanGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPlan}
     */
    this.customerPlanGet = function(customerId, customerPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerPlanGet";
      }

      // verify the required parameter 'customerPlanId' is set
      if (customerPlanId == undefined || customerPlanId == null) {
        throw "Missing the required parameter 'customerPlanId' when calling customerPlanGet";
      }


      var pathParams = {
        'customer-id': customerId,
        'customer-plan-id': customerPlanId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerPlan;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/plan/{customer-plan-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerPlanGetAll operation.
     * @callback module:api/SsPricingApi~customerPlanGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Get all Products Customers
     * @param {String} customerId 
     * @param {module:api/SsPricingApi~customerPlanGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.customerPlanGetAll = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerPlanGetAll";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/plan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerPlanPay operation.
     * @callback module:api/SsPricingApi~customerPlanPayCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {String} customerPlanId 
     * @param {String} customerBillId 
     * @param {module:model/String} whenPay 
     * @param {module:api/SsPricingApi~customerPlanPayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.customerPlanPay = function(customerId, customerPlanId, customerBillId, whenPay, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerPlanPay";
      }

      // verify the required parameter 'customerPlanId' is set
      if (customerPlanId == undefined || customerPlanId == null) {
        throw "Missing the required parameter 'customerPlanId' when calling customerPlanPay";
      }

      // verify the required parameter 'customerBillId' is set
      if (customerBillId == undefined || customerBillId == null) {
        throw "Missing the required parameter 'customerBillId' when calling customerPlanPay";
      }

      // verify the required parameter 'whenPay' is set
      if (whenPay == undefined || whenPay == null) {
        throw "Missing the required parameter 'whenPay' when calling customerPlanPay";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'customer-plan-id': customerPlanId,
        'customer-bill-id': customerBillId,
        'when-pay': whenPay
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/plan/pay', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerPlanPlan operation.
     * @callback module:api/SsPricingApi~customerPlanPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Get all the actual customerPlanId for the planId
     * @param {String} customerId 
     * @param {String} planId 
     * @param {module:api/SsPricingApi~customerPlanPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plan}
     */
    this.customerPlanPlan = function(customerId, planId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerPlanPlan";
      }

      // verify the required parameter 'planId' is set
      if (planId == undefined || planId == null) {
        throw "Missing the required parameter 'planId' when calling customerPlanPlan";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'plan-id': planId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Plan;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/plan/plan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerPlanValues operation.
     * @callback module:api/SsPricingApi~customerPlanValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} customerId 
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {module:api/SsPricingApi~customerPlanValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerPlanValues = function(customerId, page, numberPerPage, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling customerPlanValues";
      }

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling customerPlanValues";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling customerPlanValues";
      }


      var pathParams = {
        'customer-id': customerId
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/s4s-pricing/customer/{customer-id}/plan/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pricing operation.
     * @callback module:api/SsPricingApi~pricingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingTableFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Get the actual pricing configuration, usefull for dynamic create a pricing table
     * @param {String} currency 
     * @param {String} onlyPanId 
     * @param {module:api/SsPricingApi~pricingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingTableFull}
     */
    this.pricing = function(currency, onlyPanId, callback) {
      var postBody = null;

      // verify the required parameter 'currency' is set
      if (currency == undefined || currency == null) {
        throw "Missing the required parameter 'currency' when calling pricing";
      }

      // verify the required parameter 'onlyPanId' is set
      if (onlyPanId == undefined || onlyPanId == null) {
        throw "Missing the required parameter 'onlyPanId' when calling pricing";
      }


      var pathParams = {
      };
      var queryParams = {
        'currency': currency,
        'only-pan-id': onlyPanId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PricingTableFull;

      return this.apiClient.callApi(
        '/s4s-pricing/pricing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pricing2 operation.
     * @callback module:api/SsPricingApi~pricing2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingTable2Full} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} currency 
     * @param {String} onlyPanId 
     * @param {module:api/SsPricingApi~pricing2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingTable2Full}
     */
    this.pricing2 = function(currency, onlyPanId, callback) {
      var postBody = null;

      // verify the required parameter 'currency' is set
      if (currency == undefined || currency == null) {
        throw "Missing the required parameter 'currency' when calling pricing2";
      }

      // verify the required parameter 'onlyPanId' is set
      if (onlyPanId == undefined || onlyPanId == null) {
        throw "Missing the required parameter 'onlyPanId' when calling pricing2";
      }


      var pathParams = {
      };
      var queryParams = {
        'currency': currency,
        'only-pan-id': onlyPanId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PricingTable2Full;

      return this.apiClient.callApi(
        '/s4s-pricing/pricing2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pricingConfigGet operation.
     * @callback module:api/SsPricingApi~pricingConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingConf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsPricingApi~pricingConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingConf}
     */
    this.pricingConfigGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PricingConf;

      return this.apiClient.callApi(
        '/s4s-pricing/pricingConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pricingConfigPut operation.
     * @callback module:api/SsPricingApi~pricingConfigPutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/PricingConf} opts.a 
     * @param {module:api/SsPricingApi~pricingConfigPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.pricingConfigPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['a'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-pricing/pricingConfig', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pricingUiConf operation.
     * @callback module:api/SsPricingApi~pricingUiConfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingUiConf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsPricingApi~pricingUiConfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingUiConf}
     */
    this.pricingUiConf = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PricingUiConf;

      return this.apiClient.callApi(
        '/s4s-pricing/pricingUiConf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pricingUiConfigGet operation.
     * @callback module:api/SsPricingApi~pricingUiConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingUiConf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsPricingApi~pricingUiConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingUiConf}
     */
    this.pricingUiConfigGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PricingUiConf;

      return this.apiClient.callApi(
        '/s4s-pricing/pricingUiConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pricingUiConfigPut operation.
     * @callback module:api/SsPricingApi~pricingUiConfigPutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/PricingUiConf} opts.a 
     * @param {module:api/SsPricingApi~pricingUiConfigPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.pricingUiConfigPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['a'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-pricing/pricingUiConfig', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
