/**
 * s4s-full
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Account', 'model/S4sError', 'model/Session', 'model/EmailRecover', 'model/InlineResponse2006', 'model/UserApi', 'model/InlineResponse2007', 'model/User', 'model/Login', 'model/UtUser', 'model/UserConfig', 'model/GoogleAuth', 'model/UserUiConf'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Account'), require('../model/S4sError'), require('../model/Session'), require('../model/EmailRecover'), require('../model/InlineResponse2006'), require('../model/UserApi'), require('../model/InlineResponse2007'), require('../model/User'), require('../model/Login'), require('../model/UtUser'), require('../model/UserConfig'), require('../model/GoogleAuth'), require('../model/UserUiConf'));
  } else {
    // Browser globals (root is window)
    if (!root.S4sFull) {
      root.S4sFull = {};
    }
    root.S4sFull.SsUserApi = factory(root.S4sFull.ApiClient, root.S4sFull.Account, root.S4sFull.S4sError, root.S4sFull.Session, root.S4sFull.EmailRecover, root.S4sFull.InlineResponse2006, root.S4sFull.UserApi, root.S4sFull.InlineResponse2007, root.S4sFull.User, root.S4sFull.Login, root.S4sFull.UtUser, root.S4sFull.UserConfig, root.S4sFull.GoogleAuth, root.S4sFull.UserUiConf);
  }
}(this, function(ApiClient, Account, S4sError, Session, EmailRecover, InlineResponse2006, UserApi, InlineResponse2007, User, Login, UtUser, UserConfig, GoogleAuth, UserUiConf) {
  'use strict';

  /**
   * SsUser service.
   * @module api/SsUserApi
   * @version stable
   */

  /**
   * Constructs a new SsUserApi. 
   * @alias module:api/SsUserApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the accountAdd operation.
     * @callback module:api/SsUserApi~accountAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/Account} opts.newAccount 
     * @param {module:api/SsUserApi~accountAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    this.accountAdd = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['newAccount'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/s4s-user/account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountAutoLogin operation.
     * @callback module:api/SsUserApi~accountAutoLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} rememberMeToken 
     * @param {module:api/SsUserApi~accountAutoLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.accountAutoLogin = function(rememberMeToken, callback) {
      var postBody = null;

      // verify the required parameter 'rememberMeToken' is set
      if (rememberMeToken == undefined || rememberMeToken == null) {
        throw "Missing the required parameter 'rememberMeToken' when calling accountAutoLogin";
      }


      var pathParams = {
      };
      var queryParams = {
        'remember-me-token': rememberMeToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/s4s-user/account/autoLogin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountChangePasswordPatch operation.
     * @callback module:api/SsUserApi~accountChangePasswordPatchCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} changePwdToken 
     * @param {Object} opts Optional parameters
     * @param {module:model/EmailRecover} opts.recover 
     * @param {module:api/SsUserApi~accountChangePasswordPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountChangePasswordPatch = function(changePwdToken, opts, callback) {
      opts = opts || {};
      var postBody = opts['recover'];

      // verify the required parameter 'changePwdToken' is set
      if (changePwdToken == undefined || changePwdToken == null) {
        throw "Missing the required parameter 'changePwdToken' when calling accountChangePasswordPatch";
      }


      var pathParams = {
      };
      var queryParams = {
        'change-pwd-token': changePwdToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/changePassword', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetAll operation.
     * @callback module:api/SsUserApi~accountGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {Boolean} loadDefaultUser 
     * @param {module:api/SsUserApi~accountGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    this.accountGetAll = function(page, numberPerPage, loadDefaultUser, callback) {
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling accountGetAll";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling accountGetAll";
      }

      // verify the required parameter 'loadDefaultUser' is set
      if (loadDefaultUser == undefined || loadDefaultUser == null) {
        throw "Missing the required parameter 'loadDefaultUser' when calling accountGetAll";
      }


      var pathParams = {
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage,
        'load-default-user': loadDefaultUser
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/s4s-user/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdGet operation.
     * @callback module:api/SsUserApi~accountIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {module:api/SsUserApi~accountIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    this.accountIdGet = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdGet";
      }


      var pathParams = {
        'account-id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdKeysAdd operation.
     * @callback module:api/SsUserApi~accountIdKeysAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserApi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {module:api/SsUserApi~accountIdKeysAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserApi}
     */
    this.accountIdKeysAdd = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdKeysAdd";
      }


      var pathParams = {
        'account-id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserApi;

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdKeysDel operation.
     * @callback module:api/SsUserApi~accountIdKeysDelCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {String} userId 
     * @param {module:api/SsUserApi~accountIdKeysDelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountIdKeysDel = function(accountId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdKeysDel";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountIdKeysDel";
      }


      var pathParams = {
        'account-id': accountId,
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/keys/{user-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdKeysGetAll operation.
     * @callback module:api/SsUserApi~accountIdKeysGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {module:api/SsUserApi~accountIdKeysGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.accountIdKeysGetAll = function(accountId, page, numberPerPage, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdKeysGetAll";
      }

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling accountIdKeysGetAll";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling accountIdKeysGetAll";
      }


      var pathParams = {
        'account-id': accountId
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdPrivateDataPut operation.
     * @callback module:api/SsUserApi~accountIdPrivateDataPutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.privateData 
     * @param {module:api/SsUserApi~accountIdPrivateDataPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountIdPrivateDataPut = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = opts['privateData'];

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdPrivateDataPut";
      }


      var pathParams = {
        'account-id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/privateData', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdPut operation.
     * @callback module:api/SsUserApi~accountIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Account} opts.newAccount 
     * @param {module:api/SsUserApi~accountIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    this.accountIdPut = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = opts['newAccount'];

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdPut";
      }


      var pathParams = {
        'account-id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdStatusPut operation.
     * @callback module:api/SsUserApi~accountIdStatusPutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {module:model/String} status 
     * @param {module:api/SsUserApi~accountIdStatusPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountIdStatusPut = function(accountId, status, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdStatusPut";
      }

      // verify the required parameter 'status' is set
      if (status == undefined || status == null) {
        throw "Missing the required parameter 'status' when calling accountIdStatusPut";
      }


      var pathParams = {
        'account-id': accountId
      };
      var queryParams = {
        'status': status
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdUserAdd operation.
     * @callback module:api/SsUserApi~accountIdUserAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {Object} opts Optional parameters
     * @param {module:model/User} opts.user 
     * @param {module:api/SsUserApi~accountIdUserAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.accountIdUserAdd = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = opts['user'];

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdUserAdd";
      }


      var pathParams = {
        'account-id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdUserChangePwdToken operation.
     * @callback module:api/SsUserApi~accountIdUserChangePwdTokenCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {String} userId 
     * @param {String} currentPwd 
     * @param {module:api/SsUserApi~accountIdUserChangePwdTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountIdUserChangePwdToken = function(accountId, userId, currentPwd, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdUserChangePwdToken";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountIdUserChangePwdToken";
      }

      // verify the required parameter 'currentPwd' is set
      if (currentPwd == undefined || currentPwd == null) {
        throw "Missing the required parameter 'currentPwd' when calling accountIdUserChangePwdToken";
      }


      var pathParams = {
        'account-id': accountId,
        'user-id': userId
      };
      var queryParams = {
        'current-pwd': currentPwd
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/user/{user-id}/changePwdToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdUserGet operation.
     * @callback module:api/SsUserApi~accountIdUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {String} userId 
     * @param {module:api/SsUserApi~accountIdUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.accountIdUserGet = function(accountId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdUserGet";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountIdUserGet";
      }


      var pathParams = {
        'account-id': accountId,
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/user/{user-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdUserLogin operation.
     * @callback module:api/SsUserApi~accountIdUserLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {String} userId 
     * @param {module:api/SsUserApi~accountIdUserLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.accountIdUserLogin = function(accountId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdUserLogin";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountIdUserLogin";
      }


      var pathParams = {
        'account-id': accountId,
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/user/{user-id}/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdUserPut operation.
     * @callback module:api/SsUserApi~accountIdUserPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/User} opts.user 
     * @param {module:api/SsUserApi~accountIdUserPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.accountIdUserPut = function(accountId, userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['user'];

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdUserPut";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountIdUserPut";
      }


      var pathParams = {
        'account-id': accountId,
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/user/{user-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountIdUserResendEmailConfirmation operation.
     * @callback module:api/SsUserApi~accountIdUserResendEmailConfirmationCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} accountId 
     * @param {String} userId 
     * @param {module:api/SsUserApi~accountIdUserResendEmailConfirmationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountIdUserResendEmailConfirmation = function(accountId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling accountIdUserResendEmailConfirmation";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountIdUserResendEmailConfirmation";
      }


      var pathParams = {
        'account-id': accountId,
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/{account-id}/user/{user-id}/resendEmailConfirmation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountLogin operation.
     * @callback module:api/SsUserApi~accountLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/Login} opts.login 
     * @param {module:api/SsUserApi~accountLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.accountLogin = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['login'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/s4s-user/account/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountLoginOrAdd operation.
     * @callback module:api/SsUserApi~accountLoginOrAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/Account} opts.account 
     * @param {module:api/SsUserApi~accountLoginOrAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.accountLoginOrAdd = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['account'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/s4s-user/account/loginOr', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountRecover operation.
     * @callback module:api/SsUserApi~accountRecoverCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/EmailRecover} opts.recover 
     * @param {module:api/SsUserApi~accountRecoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountRecover = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['recover'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUserChangePwdToken operation.
     * @callback module:api/SsUserApi~accountUserChangePwdTokenCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {String} currentPwd 
     * @param {module:api/SsUserApi~accountUserChangePwdTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountUserChangePwdToken = function(userId, currentPwd, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountUserChangePwdToken";
      }

      // verify the required parameter 'currentPwd' is set
      if (currentPwd == undefined || currentPwd == null) {
        throw "Missing the required parameter 'currentPwd' when calling accountUserChangePwdToken";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
        'current-pwd': currentPwd
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/user/{user-id}/changePwdToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUserGet operation.
     * @callback module:api/SsUserApi~accountUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {module:api/SsUserApi~accountUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.accountUserGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountUserGet";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/account/user/{user-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUserLogin operation.
     * @callback module:api/SsUserApi~accountUserLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {module:api/SsUserApi~accountUserLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.accountUserLogin = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountUserLogin";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/s4s-user/account/user/{user-id}/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUserPut operation.
     * @callback module:api/SsUserApi~accountUserPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/User} opts.user 
     * @param {module:api/SsUserApi~accountUserPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.accountUserPut = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['user'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountUserPut";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/account/user/{user-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUserResendEmailConfirmation operation.
     * @callback module:api/SsUserApi~accountUserResendEmailConfirmationCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {module:api/SsUserApi~accountUserResendEmailConfirmationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountUserResendEmailConfirmation = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling accountUserResendEmailConfirmation";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/user/{user-id}/resendEmailConfirmation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUsernameChangePwdToken operation.
     * @callback module:api/SsUserApi~accountUsernameChangePwdTokenCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} usr 
     * @param {String} currentPwd 
     * @param {module:api/SsUserApi~accountUsernameChangePwdTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountUsernameChangePwdToken = function(usr, currentPwd, callback) {
      var postBody = null;

      // verify the required parameter 'usr' is set
      if (usr == undefined || usr == null) {
        throw "Missing the required parameter 'usr' when calling accountUsernameChangePwdToken";
      }

      // verify the required parameter 'currentPwd' is set
      if (currentPwd == undefined || currentPwd == null) {
        throw "Missing the required parameter 'currentPwd' when calling accountUsernameChangePwdToken";
      }


      var pathParams = {
      };
      var queryParams = {
        'usr': usr,
        'current-pwd': currentPwd
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/username/changePwdToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUsernameGet operation.
     * @callback module:api/SsUserApi~accountUsernameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} usr 
     * @param {module:api/SsUserApi~accountUsernameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.accountUsernameGet = function(usr, callback) {
      var postBody = null;

      // verify the required parameter 'usr' is set
      if (usr == undefined || usr == null) {
        throw "Missing the required parameter 'usr' when calling accountUsernameGet";
      }


      var pathParams = {
      };
      var queryParams = {
        'usr': usr
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/account/username', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUsernameLogin operation.
     * @callback module:api/SsUserApi~accountUsernameLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} usr 
     * @param {module:api/SsUserApi~accountUsernameLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.accountUsernameLogin = function(usr, callback) {
      var postBody = null;

      // verify the required parameter 'usr' is set
      if (usr == undefined || usr == null) {
        throw "Missing the required parameter 'usr' when calling accountUsernameLogin";
      }


      var pathParams = {
      };
      var queryParams = {
        'usr': usr
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/s4s-user/account/username/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUsernamePut operation.
     * @callback module:api/SsUserApi~accountUsernamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} usr 
     * @param {Object} opts Optional parameters
     * @param {module:model/User} opts.user 
     * @param {module:api/SsUserApi~accountUsernamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.accountUsernamePut = function(usr, opts, callback) {
      opts = opts || {};
      var postBody = opts['user'];

      // verify the required parameter 'usr' is set
      if (usr == undefined || usr == null) {
        throw "Missing the required parameter 'usr' when calling accountUsernamePut";
      }


      var pathParams = {
      };
      var queryParams = {
        'usr': usr
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/account/username', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUsernameResendEmailConfirmation operation.
     * @callback module:api/SsUserApi~accountUsernameResendEmailConfirmationCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} usr 
     * @param {module:api/SsUserApi~accountUsernameResendEmailConfirmationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountUsernameResendEmailConfirmation = function(usr, callback) {
      var postBody = null;

      // verify the required parameter 'usr' is set
      if (usr == undefined || usr == null) {
        throw "Missing the required parameter 'usr' when calling accountUsernameResendEmailConfirmation";
      }


      var pathParams = {
      };
      var queryParams = {
        'usr': usr
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/account/username/resendEmailConfirmation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticate operation.
     * @callback module:api/SsUserApi~authenticateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UtUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} authtoken 
     * @param {module:api/SsUserApi~authenticateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UtUser}
     */
    this.authenticate = function(authtoken, callback) {
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw "Missing the required parameter 'authtoken' when calling authenticate";
      }


      var pathParams = {
      };
      var queryParams = {
        'authtoken': authtoken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UtUser;

      return this.apiClient.callApi(
        '/s4s-user/authenticate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the config operation.
     * @callback module:api/SsUserApi~configCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsUserApi~configCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserConfig}
     */
    this.config = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserConfig;

      return this.apiClient.callApi(
        '/s4s-user/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the googleLogin operation.
     * @callback module:api/SsUserApi~googleLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/GoogleAuth} opts.google 
     * @param {module:api/SsUserApi~googleLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.googleLogin = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['google'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/s4s-user/googleLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the htmlConf operation.
     * @callback module:api/SsUserApi~htmlConfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserUiConf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsUserApi~htmlConfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserUiConf}
     */
    this.htmlConf = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserUiConf;

      return this.apiClient.callApi(
        '/s4s-user/htmlConf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the renewSession operation.
     * @callback module:api/SsUserApi~renewSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} authtoken 
     * @param {module:api/SsUserApi~renewSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.renewSession = function(authtoken, callback) {
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw "Missing the required parameter 'authtoken' when calling renewSession";
      }


      var pathParams = {
      };
      var queryParams = {
        'authtoken': authtoken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/s4s-user/renewSession', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountGet operation.
     * @callback module:api/SsUserApi~selfAccountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsUserApi~selfAccountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    this.selfAccountGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/s4s-user/selfAccount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountKeysAdd operation.
     * @callback module:api/SsUserApi~selfAccountKeysAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserApi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsUserApi~selfAccountKeysAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserApi}
     */
    this.selfAccountKeysAdd = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserApi;

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountKeysDel operation.
     * @callback module:api/SsUserApi~selfAccountKeysDelCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {module:api/SsUserApi~selfAccountKeysDelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.selfAccountKeysDel = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling selfAccountKeysDel";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/keys/{user-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountKeysGetAll operation.
     * @callback module:api/SsUserApi~selfAccountKeysGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Integer} page 
     * @param {Integer} numberPerPage 
     * @param {module:api/SsUserApi~selfAccountKeysGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.selfAccountKeysGetAll = function(page, numberPerPage, callback) {
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page == undefined || page == null) {
        throw "Missing the required parameter 'page' when calling selfAccountKeysGetAll";
      }

      // verify the required parameter 'numberPerPage' is set
      if (numberPerPage == undefined || numberPerPage == null) {
        throw "Missing the required parameter 'numberPerPage' when calling selfAccountKeysGetAll";
      }


      var pathParams = {
      };
      var queryParams = {
        'page': page,
        'number-per-page': numberPerPage
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountPrivateDataPut operation.
     * @callback module:api/SsUserApi~selfAccountPrivateDataPutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.privateData 
     * @param {module:api/SsUserApi~selfAccountPrivateDataPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.selfAccountPrivateDataPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['privateData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/privateData', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountPut operation.
     * @callback module:api/SsUserApi~selfAccountPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/Account} opts.newAccount 
     * @param {module:api/SsUserApi~selfAccountPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    this.selfAccountPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['newAccount'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/s4s-user/selfAccount', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountStatusPut operation.
     * @callback module:api/SsUserApi~selfAccountStatusPutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:model/String} status 
     * @param {module:api/SsUserApi~selfAccountStatusPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.selfAccountStatusPut = function(status, callback) {
      var postBody = null;

      // verify the required parameter 'status' is set
      if (status == undefined || status == null) {
        throw "Missing the required parameter 'status' when calling selfAccountStatusPut";
      }


      var pathParams = {
      };
      var queryParams = {
        'status': status
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountUserAdd operation.
     * @callback module:api/SsUserApi~selfAccountUserAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/User} opts.user 
     * @param {module:api/SsUserApi~selfAccountUserAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.selfAccountUserAdd = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['user'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountUserChangePwdToken operation.
     * @callback module:api/SsUserApi~selfAccountUserChangePwdTokenCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {String} currentPwd 
     * @param {module:api/SsUserApi~selfAccountUserChangePwdTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.selfAccountUserChangePwdToken = function(userId, currentPwd, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling selfAccountUserChangePwdToken";
      }

      // verify the required parameter 'currentPwd' is set
      if (currentPwd == undefined || currentPwd == null) {
        throw "Missing the required parameter 'currentPwd' when calling selfAccountUserChangePwdToken";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
        'current-pwd': currentPwd
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/user/{user-id}/changePwdToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountUserGet operation.
     * @callback module:api/SsUserApi~selfAccountUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {module:api/SsUserApi~selfAccountUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.selfAccountUserGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling selfAccountUserGet";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/user/{user-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountUserLogin operation.
     * @callback module:api/SsUserApi~selfAccountUserLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {module:api/SsUserApi~selfAccountUserLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.selfAccountUserLogin = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling selfAccountUserLogin";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/user/{user-id}/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountUserPut operation.
     * @callback module:api/SsUserApi~selfAccountUserPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/User} opts.user 
     * @param {module:api/SsUserApi~selfAccountUserPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.selfAccountUserPut = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['user'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling selfAccountUserPut";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/user/{user-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAccountUserResendEmailConfirmation operation.
     * @callback module:api/SsUserApi~selfAccountUserResendEmailConfirmationCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {module:api/SsUserApi~selfAccountUserResendEmailConfirmationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.selfAccountUserResendEmailConfirmation = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling selfAccountUserResendEmailConfirmation";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/selfAccount/user/{user-id}/resendEmailConfirmation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfUserChangePwdToken operation.
     * @callback module:api/SsUserApi~selfUserChangePwdTokenCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} currentPwd 
     * @param {module:api/SsUserApi~selfUserChangePwdTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.selfUserChangePwdToken = function(currentPwd, callback) {
      var postBody = null;

      // verify the required parameter 'currentPwd' is set
      if (currentPwd == undefined || currentPwd == null) {
        throw "Missing the required parameter 'currentPwd' when calling selfUserChangePwdToken";
      }


      var pathParams = {
      };
      var queryParams = {
        'current-pwd': currentPwd
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/selfUser/changePwdToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfUserGet operation.
     * @callback module:api/SsUserApi~selfUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsUserApi~selfUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.selfUserGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/selfUser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfUserLogin operation.
     * @callback module:api/SsUserApi~selfUserLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsUserApi~selfUserLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.selfUserLogin = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/s4s-user/selfUser/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfUserPut operation.
     * @callback module:api/SsUserApi~selfUserPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/User} opts.user 
     * @param {module:api/SsUserApi~selfUserPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.selfUserPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['user'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/s4s-user/selfUser', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selfUserResendEmailConfirmation operation.
     * @callback module:api/SsUserApi~selfUserResendEmailConfirmationCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsUserApi~selfUserResendEmailConfirmationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.selfUserResendEmailConfirmation = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/selfUser/resendEmailConfirmation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userConfigGet operation.
     * @callback module:api/SsUserApi~userConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsUserApi~userConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserConfig}
     */
    this.userConfigGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserConfig;

      return this.apiClient.callApi(
        '/s4s-user/userConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userConfigPut operation.
     * @callback module:api/SsUserApi~userConfigPutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserConfig} opts.a 
     * @param {module:api/SsUserApi~userConfigPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.userConfigPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['a'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/userConfig', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUiConfigGet operation.
     * @callback module:api/SsUserApi~userUiConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserUiConf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {module:api/SsUserApi~userUiConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserUiConf}
     */
    this.userUiConfigGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserUiConf;

      return this.apiClient.callApi(
        '/s4s-user/userUiConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUiConfigPut operation.
     * @callback module:api/SsUserApi~userUiConfigPutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserUiConf} opts.a 
     * @param {module:api/SsUserApi~userUiConfigPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.userUiConfigPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['a'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user/userUiConfig', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
