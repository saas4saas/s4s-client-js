/**
 * s4s-full
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/S4sError', 'model/OperatorConfiguration', 'model/Email'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/S4sError'), require('../model/OperatorConfiguration'), require('../model/Email'));
  } else {
    // Browser globals (root is window)
    if (!root.S4sFull) {
      root.S4sFull = {};
    }
    root.S4sFull.SsUserNotificationApi = factory(root.S4sFull.ApiClient, root.S4sFull.S4sError, root.S4sFull.OperatorConfiguration, root.S4sFull.Email);
  }
}(this, function(ApiClient, S4sError, OperatorConfiguration, Email) {
  'use strict';

  /**
   * SsUserNotification service.
   * @module api/SsUserNotificationApi
   * @version stable
   */

  /**
   * Constructs a new SsUserNotificationApi. 
   * @alias module:api/SsUserNotificationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the operatorConf operation.
     * @callback module:api/SsUserNotificationApi~operatorConfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperatorConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} notificationKey 
     * @param {module:api/SsUserNotificationApi~operatorConfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperatorConfiguration}
     */
    this.operatorConf = function(notificationKey, callback) {
      var postBody = null;

      // verify the required parameter 'notificationKey' is set
      if (notificationKey == undefined || notificationKey == null) {
        throw "Missing the required parameter 'notificationKey' when calling operatorConf";
      }


      var pathParams = {
        'notification-key': notificationKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OperatorConfiguration;

      return this.apiClient.callApi(
        '/s4s-user-notification/operator/conf/{notification-key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operatorSend operation.
     * @callback module:api/SsUserNotificationApi~operatorSendCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} notificationKey 
     * @param {module:api/SsUserNotificationApi~operatorSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.operatorSend = function(notificationKey, callback) {
      var postBody = null;

      // verify the required parameter 'notificationKey' is set
      if (notificationKey == undefined || notificationKey == null) {
        throw "Missing the required parameter 'notificationKey' when calling operatorSend";
      }


      var pathParams = {
        'notification-key': notificationKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user-notification/operator/send/{notification-key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operatorSendEmail operation.
     * @callback module:api/SsUserNotificationApi~operatorSendEmailCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} notificationKey 
     * @param {Object} opts Optional parameters
     * @param {module:model/Email} opts.email 
     * @param {module:api/SsUserNotificationApi~operatorSendEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.operatorSendEmail = function(notificationKey, opts, callback) {
      opts = opts || {};
      var postBody = opts['email'];

      // verify the required parameter 'notificationKey' is set
      if (notificationKey == undefined || notificationKey == null) {
        throw "Missing the required parameter 'notificationKey' when calling operatorSendEmail";
      }


      var pathParams = {
      };
      var queryParams = {
        'notification-key': notificationKey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user-notification/operator/sendEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userSend operation.
     * @callback module:api/SsUserNotificationApi~userSendCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {String} notificationKey 
     * @param {module:api/SsUserNotificationApi~userSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.userSend = function(userId, notificationKey, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling userSend";
      }

      // verify the required parameter 'notificationKey' is set
      if (notificationKey == undefined || notificationKey == null) {
        throw "Missing the required parameter 'notificationKey' when calling userSend";
      }


      var pathParams = {
        'notification-key': notificationKey
      };
      var queryParams = {
        'user-id': userId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user-notification/user/send/{notification-key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userSendEmail operation.
     * @callback module:api/SsUserNotificationApi~userSendEmailCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Email} opts.email 
     * @param {module:api/SsUserNotificationApi~userSendEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.userSendEmail = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['email'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling userSendEmail";
      }


      var pathParams = {
      };
      var queryParams = {
        'user-id': userId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['tenantid', 'token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/s4s-user-notification/user/sendEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
